{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Copier Templates Extensions \u00a4 Special Jinja2 extension for Copier that allows to load extensions using file paths relative to the template root instead of Python dotted paths. Requirements \u00a4 Copier Templates Extensions requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.12 # make it available globally pyenv global system 3 .6.12 Installation \u00a4 With pip : pip install copier-templates-extensions With pipx : pip install --user pipx pipx install copier pipx inject copier copier-templates-extensions Usage \u00a4 This is not yet functional. We need something from Copier first: a way to get the path to the template on the disk. For example, Copier could set an environment variable with the path to the temporary cloned template as value. In your template configuration, first add this extension, then add your templates extensions using relative file paths, and the class name after a colon: _extensions : - copier_templates_extensions.Ext - extensions/context.py:ContextUpdateExtension - extensions/slugify.py:SlugifyExtension Context hook extension \u00a4 This package also provides a convenient extension class allowing template writers to update the context used to render templates, in order to add, modify or remove items of the context. In one of your relative path extensions modules, create a class that inherits from ContextHook , and override its hook method: from copier_templates_extensions import ContextHook class ContextUpdater ( ContextHook ): def hook ( self , context ): new_context = {} new_context [ \"say\" ] = \"hello \" + context [ \"name\" ] return new_context Using the above example, your context will be updated with the new_context returned by the method. If you prefer to modify the context in-place instead, for example to remove items from it, set the update class attribute to False : from copier_templates_extensions import ContextHook class ContextUpdater ( ContextHook ): update = False def hook ( self , context ): context [ \"say\" ] = \"hello \" + context [ \"name\" ] del context [ \"name\" ] How does it work? \u00a4 Beware the ugly hack! Upon loading this special extension, the function responsible for importing a Python object using its dotted-path (a string) is patched in the jinja.environment module, where it's used to load extensions. The patched version adds support for loading extensions using relative file paths.","title":"Overview"},{"location":"#copier-templates-extensions","text":"Special Jinja2 extension for Copier that allows to load extensions using file paths relative to the template root instead of Python dotted paths.","title":"Copier Templates Extensions"},{"location":"#requirements","text":"Copier Templates Extensions requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.12 # make it available globally pyenv global system 3 .6.12","title":"Requirements"},{"location":"#installation","text":"With pip : pip install copier-templates-extensions With pipx : pip install --user pipx pipx install copier pipx inject copier copier-templates-extensions","title":"Installation"},{"location":"#usage","text":"This is not yet functional. We need something from Copier first: a way to get the path to the template on the disk. For example, Copier could set an environment variable with the path to the temporary cloned template as value. In your template configuration, first add this extension, then add your templates extensions using relative file paths, and the class name after a colon: _extensions : - copier_templates_extensions.Ext - extensions/context.py:ContextUpdateExtension - extensions/slugify.py:SlugifyExtension","title":"Usage"},{"location":"#context-hook-extension","text":"This package also provides a convenient extension class allowing template writers to update the context used to render templates, in order to add, modify or remove items of the context. In one of your relative path extensions modules, create a class that inherits from ContextHook , and override its hook method: from copier_templates_extensions import ContextHook class ContextUpdater ( ContextHook ): def hook ( self , context ): new_context = {} new_context [ \"say\" ] = \"hello \" + context [ \"name\" ] return new_context Using the above example, your context will be updated with the new_context returned by the method. If you prefer to modify the context in-place instead, for example to remove items from it, set the update class attribute to False : from copier_templates_extensions import ContextHook class ContextUpdater ( ContextHook ): update = False def hook ( self , context ): context [ \"say\" ] = \"hello \" + context [ \"name\" ] del context [ \"name\" ]","title":"Context hook extension"},{"location":"#how-does-it-work","text":"Beware the ugly hack! Upon loading this special extension, the function responsible for importing a Python object using its dotted-path (a string) is patched in the jinja.environment module, where it's used to load extensions. The patched version adds support for loading extensions using relative file paths.","title":"How does it work?"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.1.0 - 2021-03-29 \u00a4 Compare with first commit Code Refactoring \u00a4 Reorganize code ( 474b617 by Timoth\u00e9e Mazzucotelli). Features \u00a4 Add context hook extension ( ce95212 by Timoth\u00e9e Mazzucotelli). Add initial contents ( e745783 by Timoth\u00e9e Mazzucotelli).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#010-2021-03-29","text":"Compare with first commit","title":"0.1.0 - 2021-03-29"},{"location":"changelog/#code-refactoring","text":"Reorganize code ( 474b617 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#features","text":"Add context hook extension ( ce95212 by Timoth\u00e9e Mazzucotelli). Add initial contents ( e745783 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd copier-templates-extensions make setup Note If it fails for some reason, you'll need to install Poetry manually. You can install it with: python3 -m pip install --user pipx pipx install poetry Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run copier-templates-extensions [ARGS...] . Run make help to see all the available actions! Tasks \u00a4 This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run duty TASK , or duty TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd copier-templates-extensions make setup Note If it fails for some reason, you'll need to install Poetry manually. You can install it with: python3 -m pip install --user pipx pipx install poetry Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run copier-templates-extensions [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run duty TASK , or duty TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"Credits \u00a4 These projects were used to build copier-templates-extensions . Thank you! python | poetry | copier-poetry Direct dependencies \u00a4 autoflake | black | copier | darglint | duty | flake8-bandit | flake8-black | flake8-bugbear | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-pytest-style | flake8-string-format | flake8-tidy-imports | flake8-variables-names | git-changelog | httpx | isort | jinja2-cli | mkdocs | mkdocs-coverage | mkdocs-macros-plugin | mkdocs-material | mkdocstrings | mypy | pep8-naming | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | toml | wps-light Indirect dependencies \u00a4 ansimarkup | apipkg | appdirs | astor | astunparse | atomicwrites | attrs | backports.cached-property | bandit | cached-property | certifi | click | colorama | contextvars | coverage | dataclasses | execnet | failprint | flake8 | flake8-plugin-utils | flake8-polyfill | future | gitdb | GitPython | h11 | httpcore | idna | immutables | importlib-metadata | iniconfig | iteration-utilities | Jinja2 | joblib | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-autorefs | mkdocs-material-extensions | mypy-extensions | nltk | packaging | pathspec | pbr | pluggy | plumbum | prompt-toolkit | ptyprocess | py | pycodestyle | pydantic | pydocstyle | pyflakes | Pygments | pymdown-extensions | pyparsing | pypiwin32 | pytest-forked | python-dateutil | pytkdocs | pywin32 | PyYAML | pyyaml-include | questionary | regex | rfc3986 | six | smmap | sniffio | snowballstemmer | stevedore | termcolor | tornado | tqdm | typed-ast | typing | typing-extensions | wcwidth | zipp More credits from the author","title":"Credits"},{"location":"credits/#credits","text":"These projects were used to build copier-templates-extensions . Thank you! python | poetry | copier-poetry","title":"Credits"},{"location":"credits/#direct-dependencies","text":"autoflake | black | copier | darglint | duty | flake8-bandit | flake8-black | flake8-bugbear | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-pytest-style | flake8-string-format | flake8-tidy-imports | flake8-variables-names | git-changelog | httpx | isort | jinja2-cli | mkdocs | mkdocs-coverage | mkdocs-macros-plugin | mkdocs-material | mkdocstrings | mypy | pep8-naming | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | toml | wps-light","title":"Direct dependencies"},{"location":"credits/#indirect-dependencies","text":"ansimarkup | apipkg | appdirs | astor | astunparse | atomicwrites | attrs | backports.cached-property | bandit | cached-property | certifi | click | colorama | contextvars | coverage | dataclasses | execnet | failprint | flake8 | flake8-plugin-utils | flake8-polyfill | future | gitdb | GitPython | h11 | httpcore | idna | immutables | importlib-metadata | iniconfig | iteration-utilities | Jinja2 | joblib | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-autorefs | mkdocs-material-extensions | mypy-extensions | nltk | packaging | pathspec | pbr | pluggy | plumbum | prompt-toolkit | ptyprocess | py | pycodestyle | pydantic | pydocstyle | pyflakes | Pygments | pymdown-extensions | pyparsing | pypiwin32 | pytest-forked | python-dateutil | pytkdocs | pywin32 | PyYAML | pyyaml-include | questionary | regex | rfc3986 | six | smmap | sniffio | snowballstemmer | stevedore | termcolor | tornado | tqdm | typed-ast | typing | typing-extensions | wcwidth | zipp More credits from the author","title":"Indirect dependencies"},{"location":"license/","text":"ISC License Copyright (c) 2021, Timoth\u00e9e Mazzucotelli Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"License"},{"location":"reference/extensions/","text":"Extensions modules. context_hook \u00a4 Extension allowing to modify the Copier context. ContextHook \u00a4 Extension allowing to modify the Copier context. __init__ ( extension_self , environment ) special \u00a4 Initialize the object. Parameters: Name Type Description Default environment The Jinja environment. required Source code in copier_templates_extensions/extensions/context_hook.py def __init__ ( extension_self , environment ): # noqa: N805 (self) \"\"\"Initialize the object. Arguments: environment: The Jinja environment. \"\"\" super () . __init__ ( environment ) class ContextClass ( Context ): # noqa: WPS431 (nested class) def __init__ ( self , env , parent , name , blocks ): if \"_copier_conf\" in parent : if extension_self . update : parent . update ( extension_self . hook ( parent )) else : extension_self . hook ( parent ) super () . __init__ ( env , parent , name , blocks ) environment . context_class = ContextClass hook ( self , context ) \u00a4 Abstract hook. Does nothing. Override this method to either return a new context dictionary that will be used to update the original one, or modify the context object in-place. Parameters: Name Type Description Default context dict The context to modify. required Returns: Type Description dict Same context modified, or new one. Source code in copier_templates_extensions/extensions/context_hook.py def hook ( self , context : dict ) -> dict : \"\"\"Abstract hook. Does nothing. Override this method to either return a new context dictionary that will be used to update the original one, or modify the context object in-place. Arguments: context: The context to modify. Returns: Same context modified, or new one. \"\"\" return {} relative_path \u00a4 Extension allowing to load other extensions using relative file paths. TemplateRelativePath \u00a4 Extension allowing to load other extensions using relative file paths. __init__ ( self , environment ) special \u00a4 Initialize the object. Parameters: Name Type Description Default environment The Jinja environment. required Source code in copier_templates_extensions/extensions/relative_path.py def __init__ ( self , environment ): \"\"\"Initialize the object. Arguments: environment: The Jinja environment. \"\"\" super () . __init__ ( environment ) # patch jinja's extension loading mechanism jinja_env_module . import_string = self . _patched_import_string","title":"extensions"},{"location":"reference/extensions/#copier_templates_extensions.extensions.context_hook","text":"Extension allowing to modify the Copier context.","title":"context_hook"},{"location":"reference/extensions/#copier_templates_extensions.extensions.context_hook.ContextHook","text":"Extension allowing to modify the Copier context.","title":"ContextHook"},{"location":"reference/extensions/#copier_templates_extensions.extensions.context_hook.ContextHook.__init__","text":"Initialize the object. Parameters: Name Type Description Default environment The Jinja environment. required Source code in copier_templates_extensions/extensions/context_hook.py def __init__ ( extension_self , environment ): # noqa: N805 (self) \"\"\"Initialize the object. Arguments: environment: The Jinja environment. \"\"\" super () . __init__ ( environment ) class ContextClass ( Context ): # noqa: WPS431 (nested class) def __init__ ( self , env , parent , name , blocks ): if \"_copier_conf\" in parent : if extension_self . update : parent . update ( extension_self . hook ( parent )) else : extension_self . hook ( parent ) super () . __init__ ( env , parent , name , blocks ) environment . context_class = ContextClass","title":"__init__()"},{"location":"reference/extensions/#copier_templates_extensions.extensions.context_hook.ContextHook.hook","text":"Abstract hook. Does nothing. Override this method to either return a new context dictionary that will be used to update the original one, or modify the context object in-place. Parameters: Name Type Description Default context dict The context to modify. required Returns: Type Description dict Same context modified, or new one. Source code in copier_templates_extensions/extensions/context_hook.py def hook ( self , context : dict ) -> dict : \"\"\"Abstract hook. Does nothing. Override this method to either return a new context dictionary that will be used to update the original one, or modify the context object in-place. Arguments: context: The context to modify. Returns: Same context modified, or new one. \"\"\" return {}","title":"hook()"},{"location":"reference/extensions/#copier_templates_extensions.extensions.relative_path","text":"Extension allowing to load other extensions using relative file paths.","title":"relative_path"},{"location":"reference/extensions/#copier_templates_extensions.extensions.relative_path.TemplateRelativePath","text":"Extension allowing to load other extensions using relative file paths.","title":"TemplateRelativePath"},{"location":"reference/extensions/#copier_templates_extensions.extensions.relative_path.TemplateRelativePath.__init__","text":"Initialize the object. Parameters: Name Type Description Default environment The Jinja environment. required Source code in copier_templates_extensions/extensions/relative_path.py def __init__ ( self , environment ): \"\"\"Initialize the object. Arguments: environment: The Jinja environment. \"\"\" super () . __init__ ( environment ) # patch jinja's extension loading mechanism jinja_env_module . import_string = self . _patched_import_string","title":"__init__()"},{"location":"coverage/","text":".md-content { max-width: none !important; } article h1, article > a { display: none; } function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.documentElement.scrollHeight + 'px'; }","title":"Coverage report"}]}